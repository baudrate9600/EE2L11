library IEEE;
use IEEE.std_logic_1164.ALL;

architecture behaviour of sqi_controller is
	type sqi_state is (INIT, START, s0,s1);
	signal state, new_state : sqi_state;
	signal done_ff  : std_logic;
		signal done_reg : std_logic; 
	signal instruction      : std_logic_vector(7 downto 0);  
	signal spi : std_logic;
begin

		--New state generation
	process (clk) 
	begin
		if rising_edge(clk) then 
			if reset = '1' then 
				state <= INIT;
			else 
				state <= new_state;
			end if; 
		end if; 
	end process;

	--FSM 
	process(state, en ,spi,count_in ,count_out,reg_load, reg_shift,done_ff) 
	begin 
		count_out <= "0000";
		count_en <= '1'; 
		count_load <= '0';
		reg_load<='0'; 
		reg_shift <= '0';
		done_ff <= done_reg;  
		spi <= '0';
		case state is 
			--Initialize the chip to SQI mode 
			when INIT =>
				--Send start command on the spi_wire, 00011100
				if(count_in = x"3" or count_in = x"4" or count_in = x"5") then
					spi <= '1';
				else 
					spi <= '0';
				end if; 
				--Done with sending the commands
				if (count_in = x"8") then 
					count_load <= '1';
					new_state <= START;
				else 
					new_state <= INIT; 
				end if; 
			
			--Load the Registers and update the rom address of the instruction command
			when START => 
				count_en <= '0';			
				reg_load<= '1'; 
				if(en = '1') then 
					 new_state <= s0;
				else 
					count_load <= '1'; 
					new_state <= start; 
				end if; 
			--State S0 and S1 go back and forth in loading the shift register and shifting .. 
			-- the shift register
			when s0 =>
				reg_load<='0';
				reg_shift <= '1';   
				new_state <= s1;
			when s1 =>

				new_state <= s0; 
	
				reg_shift <= '0';
				
				count_en <= '0';
			--When all the bytes have been sent/read then the first cycle is complete and .. 
			-- then if Enable is high it will continue reading or continue writing but wont.. 
			--		resend the address and instruction command 
			if((( count_in = x"4" and RW = '0') or (count_in = x"5" and RW = '1')) and done_reg = '0') then 
						done_ff <= '1';
				else 
						done_ff <= '0';
			end if;
			
			--If the enable signal is kept high it will continue sending or reading 
			if(en = '0' and done_reg = '1') then
						new_state <= start;
						done_ff <= '0';
				else	
					new_state <= S0;
			end if;

			--When the address and instruction command have been sent stop loading the register when ..
			-- in read mode as only data is shifted in 
				if(RW = '1' and done_reg = '1') then
						reg_load <= '0';
						reg_shift <= '1';
				else 
						reg_load <= '1';
				end if;

			when others =>
		end case; 			
	end process;
	--Data multiplexer 	
	with count_in SELECT 
	data_out <= 	instruction 	when "0000",
								"00000000" when "0001", 	
							 	'0' & address(14 downto 8) when "0010",
								address(7  downto 0) when "0011",
								data_in 		when "0100",
					    		"00000000" when others;

		instruction <= "00110000" when RW = '1' else "00100000";
		--done signal
	process(clk) 
	begin 		
		if rising_edge(clk) then 		
			if reset = '1' then 
					done_reg <= '0'; 
			else 
					done_reg <= done_ff;
			end if; 
		end if; 
		
	end process;

		--SQI MASTER
	process(state,clk)
	begin
		if(state /= START and reset = '0') then 
			SCK <= not CLK;
			CS  <= '0';
		else 
			SCK <= '1';
			CS  <= '1';	
		end if; 	
	end process; 




  --MOSI port
	MOSI(0) <= shift_in(0) when state /= INIT else spi;
	MOSI(1) <= shift_in(1); 
	MOSI(2)	<= shift_in(2);
	MOSI(3) <= shift_in(3);
done    <= done_reg; 
end behaviour;

